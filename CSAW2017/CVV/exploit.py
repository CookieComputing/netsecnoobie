import CreditCard
from random import Random
from pwn import *
import re
import time

generator = Random()
generator.seed()

mastercard = CreditCard.credit_card_number(generator, CreditCard.mastercardPrefixList, 16, 10)

visa16 = CreditCard.credit_card_number(generator, CreditCard.visaPrefixList, 16, 10)


visa13 = CreditCard.credit_card_number(generator, CreditCard.visaPrefixList, 13, 5)


amex = CreditCard.credit_card_number(generator, CreditCard.amexPrefixList, 15, 5)

discover = CreditCard.credit_card_number(generator, CreditCard.discoverPrefixList, 16, 3)

def luhn_checksum(card_number):
    def digits_of(n):
        return [int(d) for d in str(n)]
    digits = digits_of(card_number)
    odd_digits = digits[-1::-2]
    even_digits = digits[-2::-2]
    checksum = 0
    checksum += sum(odd_digits)
    for d in even_digits:
        checksum += sum(digits_of(d*2))
    return checksum % 10

def is_luhn_valid(card_number):
    return luhn_checksum(card_number) == 0 and str(card_number)[0] != "0"

def generate_random_card():
	s = discover.next()	
	return s

def generate_card_with_prefix(num):
	card_generator = CreditCard.completed_number(num,16)			
	return card_generator

def generate_card_with_end(num):
	card_generator = generate_random_card()
								#num is an int
	while card_generator[-1] != str(num):	
		card_generator = generate_random_card()
	return card_generator	

def generate_card_with_four_end(num):
	card_generator = CreditCard.completed_number(list(str(num)),16)
	card_generator = card_generator[-4:] + card_generator[4:-4] + card_generator[:4]
	while not is_luhn_valid(card_generator):
		card_generator = CreditCard.completed_number(list(str(num)),16)
		card_generator = card_generator[-4:] + card_generator[4:-4] + card_generator[:4]	
	return card_generator	

def slice_number_string(string):
	string = string.split()[-1]
	string = int(string[:-1])
	return string	

def find_valid_num(string):
	string = string.split()
	print(string[5])
	return int(string[5])

def slice_string(string):
	if re.search("Discover",string):
		return "Discover"	
	if re.search("American Express",string):
		return "American Express"
	if re.search("MasterCard",string):
		return "MasterCard"
	if re.search("Visa",string):
		return "Visa"	
	## starts with 4 digits
	if re.search("\d\d\d\d",string) and re.search("starts",string):
		return slice_number_string(string)
	if re.search("\d",string) and re.search("ends",string):
		return slice_number_string(string)
	if re.search("\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d",string) and re.search("valid",string):
		return find_valid_num(string)	
	return NotImplementedError

def handle_string(string):
	old_string = string
	string = slice_string(string)
	if string == "Discover":
		return discover.next()
	elif string == "MasterCard":
		return mastercard.next()
	elif string == "American Express":
		return amex.next()
	elif string == "Visa":
		return visa16.next()	
	elif isinstance(string,int) and len(str(string)) == 4 and re.search("starts",old_string):
		return generate_card_with_prefix(list(str(string)))
	elif isinstance(string,int) and len(str(string)) == 1:
		return generate_card_with_end(string)
	elif isinstance(string,int) and len(str(string)) == 4 and re.search("ends",old_string):
		return generate_card_with_four_end(string)
	elif len(str(string)) == 16 and re.search("valid",old_string):
		if is_luhn_valid(string):
			print("valid")
			return "1"
		else:
			print("invalid")
			return "0"
	else:
		return NotImplementedError

#fucking work please
def main():
	conn = remote('misc.chal.csaw.io',8308)

	while True:
		s = conn.recvline()
		print(s)
		new_s = str(handle_string(s))	

		#that fucking last prompt was cancer
		# had to use interactive to solve it by hand
		if len(new_s) == 1:
			conn.interactive()
		conn.sendline(new_s)		
			
		print(conn.recvline())	
	
	

if __name__ == "__main__":
	main()
